@page "/numeral"
@inherits FrontBlazor.Services.ValidacionAcceso
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
  <div class="table-responsive">
      <div class="table-wrapper">
          <div class="table-title">
              <div class="row">
                  <div class="col-sm-6">
                      <h2>Administrar <b>Numerales</b></h2>
                  </div>
                  <div class="col-sm-6">
                      <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                          <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                      </button>

                      <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                          <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                      </button>
                  </div>
              </div>
          </div>

          @if (cargando)
          {
              <p><em>Cargando...</em></p>
          }
          else if (numerales == null || numerales.Count == 0)
          {
              <p>No hay Numerales disponibles.</p>
          }
          else
          {
              <table class="table table-striped table-hover">
                  <thead>
                      <tr>
                          <th>ID</th>
                          <th>Descripción</th>
                          <th>ID Literal</th>
                      </tr>
                  </thead>
                  <tbody>
                      @foreach (var numeral in numerales)
                      {
                          <tr>
                              <td>@ObtenerValor(numeral, "id")</td>
                              <td>@ObtenerValor(numeral, "descripcion")</td>
                              <td>@ObtenerValor(numeral, "fkidliteral")</td>
                          </tr>
                      }
                  </tbody>
              </table>
          }
      </div>
  </div>
</div>

@if (mostrarModalGuardar)
{
 <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
  <div class="modal-dialog">
      <div class="modal-content">
          <form @onsubmit="GuardarNumeral">
              <div class="modal-header">
                  <h4 class="modal-title">Agregar Numeral</h4>
                  <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
              </div>
              <div class="modal-body">
                  <div class="form-group">
                      <label>ID</label>
                      <input type="text" class="form-control" @bind="idNumeral" required maxlength="20">
                  </div>
                  <div class="form-group">
                      <label>Descripción</label>
                      <textarea class="form-control" rows="4" @bind="descripcionNumeral" required maxlength="1000"></textarea>
                  </div>
                  <div class="form-group">
                      <label>Literal</label>
                      <select class="form-control" @bind="idLiteral" required>
                          <option value="">-- Seleccione un literal --</option>
                          @foreach (var literal in literales)
                          {
                              <option value="@ObtenerValor(literal, "id")">@ObtenerValor(literal, "nombre")</option>
                          }
                      </select>
                  </div>
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                  <button type="submit" class="btn btn-success">Guardar</button>
              </div>
          </form>
      </div>
  </div>
</div>
}

@if (mostrarModalConsulta)
{
  <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h4 class="modal-title">Consultar Numeral</h4>
                  <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
              </div>
              <div class="modal-body">
                  <div class="form-group">
                      <label>ID</label>
                      <input type="text" class="form-control" @bind="idConsultar" maxlength="20">
                  </div>
                  <div class="form-group">
                      <label>Literal</label>
                      <select class="form-control" @bind="idLiteralConsultar">
                          <option value="">-- Todos los literales --</option>
                          @foreach (var literal in literales)
                          {
                              <option value="@ObtenerValor(literal, "id")">@ObtenerValor(literal, "nombre")</option>
                          }
                      </select>
                  </div>
                  <button class="btn btn-primary mt-2" @onclick="ConsultarNumeral">Buscar</button>

                  @if (numeralConsultado != null)
                  {
                      <hr>
                      <div class="form-group">
                          <label>ID</label>
                          <input type="text" class="form-control" value="@ObtenerValor(numeralConsultado, "id")" disabled>
                      </div>
                      <div class="form-group">
                          <label>Descripción</label>
                          <textarea class="form-control" rows="4" value="@ObtenerValor(numeralConsultado, "descripcion")" disabled></textarea>
                      </div>
                      <div class="form-group">
                          <label>Literal</label>
                          <input type="text" class="form-control" value="@ObtenerNombreLiteral(numeralConsultado)" disabled>
                      </div>
                  }
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
              </div>
          </div>
      </div>
  </div>
}

@code {
  private List<Dictionary<string, object>> numerales = new();
  private List<Dictionary<string, object>> literales = new();
  private bool cargando = true;
  private bool mostrarModalGuardar = false;
  private bool mostrarModalConsulta = false;

  // Variables para los formularios
  private string idNumeral;
  private string descripcionNumeral;
  private string idLiteral;
  
  // Variables para consulta
  private string idConsultar;
  private string idLiteralConsultar;

  private Dictionary<string, object> numeralConsultado;

  protected override async Task OnInitializedAsync()
  {
      await CargarNumerales();
      await CargarLiterales();
  }

  private async Task CargarNumerales()
  {
      cargando = true;
      try
      {
          numerales = await servicioEntidad.ObtenerTodosAsync("proyecto", "numeral") ?? new();
      }
      catch (Exception ex)
      {
          Console.WriteLine($"Error al cargar numerales: {ex.Message}");
          numerales = new();
      }
      finally
      {
          cargando = false;
      }
  }

  private async Task CargarLiterales()
  {
      try
      {
          literales = await servicioEntidad.ObtenerTodosAsync("proyecto", "literal") ?? new();
      }
      catch (Exception ex)
      {
          Console.WriteLine($"Error al cargar literales: {ex.Message}");
          literales = new();
      }
  }

  private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
  {
      return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
  }

  private string ObtenerNombreLiteral(Dictionary<string, object> numeral)
  {
      var idLiteral = ObtenerValor(numeral, "fkidliteral");
      var literal = literales.FirstOrDefault(l => 
          ObtenerValor(l, "id") == idLiteral);

      if (literal != null)
      {
          return $"{ObtenerValor(literal, "id")} - {ObtenerValor(literal, "nombre")}";
      }
      return idLiteral;
  }

  private void AbrirModalGuardar()
  {
      mostrarModalGuardar = true;
      idNumeral = "";
      descripcionNumeral = "";
      idLiteral = "";
  }

  private void CerrarModalGuardar()
  {
      mostrarModalGuardar = false;
  }

  private async Task GuardarNumeral()
  {
      try
      {
          // Crear un nuevo numeral con los campos según la estructura de la tabla
          var nuevoNumeral = new Dictionary<string, object>
          {
              { "id", idNumeral },
              { "descripcion", descripcionNumeral },
              { "fkidliteral", idLiteral }
          };

          var resultado = await servicioEntidad.CrearAsync("proyecto", "numeral", nuevoNumeral);

          if (resultado)
          {
              await CargarNumerales();
              CerrarModalGuardar();
          }
      }
      catch (Exception ex)
      {
          Console.WriteLine($"Error al guardar numeral: {ex.Message}");
      }
  }

  private async Task ConsultarNumeral()
  {
      try
      {
          if (!string.IsNullOrEmpty(idConsultar))
          {
              // Buscar por ID
              var numeral = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "numeral", "id", idConsultar);
              numeralConsultado = numeral;
          }
          else if (!string.IsNullOrEmpty(idLiteralConsultar))
          {
              // Buscar por literal
              var numeral = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "numeral", "fkidliteral", idLiteralConsultar);
              numeralConsultado = numeral;
          }
      }
      catch (Exception ex)
      {
          Console.WriteLine($"Error al consultar numeral: {ex.Message}");
          numeralConsultado = null;
      }
  }

  private void CerrarModalConsulta()
  {
      mostrarModalConsulta = false;
      idConsultar = "";
      idLiteralConsultar = "";
      numeralConsultado = null;
  }
}
