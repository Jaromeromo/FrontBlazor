@page "/variablesporindicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Variables por Indicador</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="EditarVariablePorIndicadorSeleccionada">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionada</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (variablesPorIndicador == null || variablesPorIndicador.Count == 0)
            {
                <p>No hay Variables por Indicador disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>ID</th>
                            <th>Variable</th>
                            <th>Indicador</th>
                            <th>Dato</th>
                            <th>Email Usuario</th>
                            <th>Fecha Dato</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var variablePorIndicador in variablesPorIndicador)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@variablesPorIndicadorSeleccionadas[variablePorIndicador]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(variablePorIndicador, "id")</td>
                                <td>@ObtenerNombreVariable(ObtenerValor(variablePorIndicador, "fkidvariable"))</td>
                                <td>@ObtenerNombreIndicador(ObtenerValor(variablePorIndicador, "fkidindicador"))</td>
                                <td>@ObtenerValor(variablePorIndicador, "dato")</td>
                                <td>@ObtenerValor(variablePorIndicador, "fkemailusuario")</td>
                                <td>@ObtenerFechaFormateada(variablePorIndicador, "fechadato")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarVariablePorIndicador(variablePorIndicador)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarVariablePorIndicador(variablePorIndicador)"
                                        @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalGuardar)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <form @onsubmit="GuardarVariablePorIndicador">
                <div class="modal-header">
                    <h4 class="modal-title">Agregar Variable por Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Variable</label>
                        <select class="form-control" @bind="idVariable" required>
                            <option value="0">Seleccione una variable</option>
                            @foreach (var variable in variable)
                            {
                                <option value="@ObtenerValor(variable, "id")">
                                    @ObtenerValor(variable, "nombre") (@ObtenerValor(variable, "id"))
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Indicador</label>
                        <select class="form-control" @bind="idIndicador" required>
                            <option value="0">Seleccione un indicador</option>
                            @foreach (var indicador in indicador)
                            {
                                <option value="@ObtenerValor(indicador, "id")">
                                    @ObtenerValor(indicador, "nombre") (@ObtenerValor(indicador, "id"))
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Dato</label>
                        <input type="number" step="0.01" class="form-control" @bind="dato" required>
                    </div>
                    <div class="form-group">
                        <label>Email Usuario</label>
                        <select class="form-control" @bind="emailUsuario" required>
                            <option value="">Seleccione un usuario</option>
                            @foreach (var usuario in usuario)
                            {
                                <option value="@ObtenerValor(usuario, "email")">
                                    @ObtenerValor(usuario, "email") (@ObtenerValor(usuario, "nombre"))
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Fecha Dato</label>
                        <input type="datetime-local" class="form-control" @bind="fechaDato" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Variable por Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID</label>
                        <select class="form-control" @bind="idVariablePorIndicadorConsultar">
                            <option value="0">Seleccione un registro</option>
                            @foreach (var vpi in variablesPorIndicador)
                            {
                                <option value="@ObtenerValor(vpi, "id")">
                                    ID: @ObtenerValor(vpi, "id") - Variable: @ObtenerNombreVariable(ObtenerValor(vpi, "fkidvariable"))
                                </option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarVariablePorIndicador">Buscar</button>

                    @if (variablePorIndicadorConsultada != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>ID</label>
                            <input type="number" class="form-control" value="@ObtenerValor(variablePorIndicadorConsultada, "id")" disabled>
                        </div>
                        <div class="form-group">
                            <label>Variable</label>
                            <input type="text" class="form-control" value="@ObtenerNombreVariable(ObtenerValor(variablePorIndicadorConsultada, "fkidvariable"))" disabled>
                        </div>
                        <div class="form-group">
                            <label>Indicador</label>
                            <input type="text" class="form-control" value="@ObtenerNombreIndicador(ObtenerValor(variablePorIndicadorConsultada, "fkidindicador"))" disabled>
                        </div>
                        <div class="form-group">
                            <label>Dato</label>
                            <input type="number" class="form-control" value="@ObtenerValor(variablePorIndicadorConsultada, "dato")" disabled>
                        </div>
                        <div class="form-group">
                            <label>Email Usuario</label>
                            <input type="email" class="form-control" value="@ObtenerValor(variablePorIndicadorConsultada, "fkemailusuario")" disabled>
                        </div>
                        <div class="form-group">
                            <label>Fecha Dato</label>
                            <input type="text" class="form-control" value="@ObtenerFechaFormateada(variablePorIndicadorConsultada, "fechadato")" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarVariablePorIndicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Variable por Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Variable</label>
                            <select class="form-control" @bind="idVariableEditar" required>
                                <option value="0">Seleccione una variable</option>
                                @foreach (var variable in variable)
                                {
                                    <option value="@ObtenerValor(variable, "id")">
                                        @ObtenerValor(variable, "nombre") (@ObtenerValor(variable, "id"))
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Indicador</label>
                            <select class="form-control" @bind="idIndicadorEditar" required>
                                <option value="0">Seleccione un indicador</option>
                                @foreach (var indicador in indicador)
                                {
                                    <option value="@ObtenerValor(indicador, "id")">
                                        @ObtenerValor(indicador, "nombre") (@ObtenerValor(indicador, "id"))
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Dato</label>
                            <input type="number" step="0.01" class="form-control" @bind="datoEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Email Usuario</label>
                            <select class="form-control" @bind="emailUsuarioEditar" required>
                                <option value="">Seleccione un usuario</option>
                                @foreach (var usuario in usuario)
                                {
                                    <option value="@ObtenerValor(usuario, "email")">
                                        @ObtenerValor(usuario, "email") (@ObtenerValor(usuario, "nombre"))
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Fecha Dato</label>
                            <input type="datetime-local" class="form-control" @bind="fechaDatoEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarVariablePorIndicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Variable por Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este registro?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Variables por Indicador Seleccionadas</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los registros seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                            @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}



@code {
    private List<Dictionary<string, object>> variablesPorIndicador = new();
    private Dictionary<Dictionary<string, object>, bool> variablesPorIndicadorSeleccionadas = new();
    private bool cargando = true;
    private bool mostrarModalGuardar = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;
    
    private Dictionary<string, object> variableAEliminar;
    private Dictionary<string, object> variablePorIndicadorConsultada;

    // Datos relacionados
    private List<Dictionary<string, object>> variable = new();
    private List<Dictionary<string, object>> indicador = new();
    private List<Dictionary<string, object>> usuario = new();

    // Cachés para nombres
    private Dictionary<string, string> cacheNombresVariable = new();
    private Dictionary<string, string> cacheNombresIndicador = new();

    private int idVariable;
    private int idIndicador;
    private float dato;
    private string emailUsuario;
    private int idVariablePorIndicadorConsultar;
    private int idVariableEditar;
    private int idIndicadorEditar;
    private float datoEditar;
    private string emailUsuarioEditar;
    private DateTime fechaDato;
    private DateTime fechaDatoEditar;
    private int idVariableOriginal;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var variable in variablesPorIndicador)
            {
                variablesPorIndicadorSeleccionadas[variable] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;

        try
        {
            // Cargar datos relacionados
            await Task.WhenAll(
                CargarVariable(),
                CargarIndicadores(),
                CargarUsuario()
            );

            // Cargar datos principales
            await CargarVariablesPorIndicador();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarVariable()
    {
        try
        {
            variable = await servicioEntidad.ObtenerTodosAsync("proyecto", "variable") ?? new();
            
            // Llenar caché de nombres
            foreach (var v in variable)
            {
                var id = ObtenerValor(v, "id");
                var nombre = ObtenerValor(v, "nombre");
                if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(nombre))
                {
                    cacheNombresVariable[id] = nombre;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar variable: {ex.Message}");
            variable = new();
        }
    }

    private async Task CargarIndicadores()
    {
        try
        {
            indicador = await servicioEntidad.ObtenerTodosAsync("proyecto", "indicador") ?? new();
            
            // Llenar caché de nombres
            foreach (var ind in indicador)
            {
                var id = ObtenerValor(ind, "id");
                var nombre = ObtenerValor(ind, "nombre");
                if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(nombre))
                {
                    cacheNombresIndicador[id] = nombre;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar indicadores: {ex.Message}");
            indicador = new();
        }
    }

    private async Task CargarUsuario()
    {
        try
        {
            usuario = await servicioEntidad.ObtenerTodosAsync("proyecto", "usuario") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuario: {ex.Message}");
            usuario = new();
        }
    }

    private async Task CargarVariablesPorIndicador()
    {
        try
        {
            variablesPorIndicador = await servicioEntidad.ObtenerTodosAsync("proyecto", "variablesporindicador") ?? new();
            variablesPorIndicadorSeleccionadas = variablesPorIndicador.ToDictionary(v => v, v => false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar variables por indicador: {ex.Message}");
            variablesPorIndicador = new();
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    
    private string ObtenerFechaFormateada(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario.TryGetValue(clave, out var valor) && valor != null)
        {
            if (DateTime.TryParse(valor.ToString(), out DateTime fecha))
            {
                return fecha.ToString("dd/MM/yyyy HH:mm:ss");
            }
        }
        return "";
    }

    private string ObtenerNombreVariable(string idVariable)
    {
        if (string.IsNullOrEmpty(idVariable)) return "N/A";
        
        if (cacheNombresVariable.TryGetValue(idVariable, out string nombre))
        {
            return nombre;
        }
        
        // Intenta encontrar la variable
        var v = variable.FirstOrDefault(v => ObtenerValor(v, "id") == idVariable);
        if (v != null)
        {
            var nombreVariable = ObtenerValor(v, "nombre");
            cacheNombresVariable[idVariable] = nombreVariable;
            return nombreVariable;
        }
        
        return $"Variable {idVariable}";
    }

    private string ObtenerNombreIndicador(string idIndicador)
    {
        if (string.IsNullOrEmpty(idIndicador)) return "N/A";
        
        if (cacheNombresIndicador.TryGetValue(idIndicador, out string nombre))
        {
            return nombre;
        }
        
        // Intenta encontrar el indicador
        var ind = indicador.FirstOrDefault(i => ObtenerValor(i, "id") == idIndicador);
        if (ind != null)
        {
            var nombreIndicador = ObtenerValor(ind, "nombre");
            cacheNombresIndicador[idIndicador] = nombreIndicador;
            return nombreIndicador;
        }
        
        return $"Indicador {idIndicador}";
    }

    private void AbrirModalGuardar()
    {
        mostrarModalGuardar = true;
        idVariable = 0;
        idIndicador = 0;
        dato = 0;
        emailUsuario = "";
        fechaDato = DateTime.Now;
    }

    private void CerrarModalGuardar()
    {
        mostrarModalGuardar = false;
    }

    private async Task GuardarVariablePorIndicador()
    {
        try
        {
            var nuevaVariablePorIndicador = new Dictionary<string, object>
            {
                { "fkidvariable", idVariable },
                { "fkidindicador", idIndicador },
                { "dato", dato },
                { "fkemailusuario", emailUsuario },
                { "fechadato", fechaDato }
            };

            var resultado = await servicioEntidad.CrearAsync("proyecto", "variablesporindicador", nuevaVariablePorIndicador);

            if (resultado)
            {
                await CargarVariablesPorIndicador();
                CerrarModalGuardar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar variable por indicador: {ex.Message}");
        }
    }

    private async Task ConsultarVariablePorIndicador()
    {
        try
        {
            var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "variablesporindicador", "id", idVariablePorIndicadorConsultar.ToString());
            
            if (resultado != null)
            {
                variablePorIndicadorConsultada = resultado;
            }
            else
            {
                variablePorIndicadorConsultada = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar variable por indicador: {ex.Message}");
            variablePorIndicadorConsultada = null;
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idVariablePorIndicadorConsultar = 0;
        variablePorIndicadorConsultada = null;
    }

    private void EditarVariablePorIndicador(Dictionary<string, object> variable)
    {
        idVariableOriginal = int.Parse(ObtenerValor(variable, "id"));
        idVariableEditar = int.Parse(ObtenerValor(variable, "fkidvariable"));
        idIndicadorEditar = int.Parse(ObtenerValor(variable, "fkidindicador"));
        datoEditar = float.Parse(ObtenerValor(variable, "dato"));
        emailUsuarioEditar = ObtenerValor(variable, "fkemailusuario");
        
        if (DateTime.TryParse(ObtenerValor(variable, "fechadato"), out DateTime fecha))
        {
            fechaDatoEditar = fecha;
        }
        else
        {
            fechaDatoEditar = DateTime.Now;
        }
        
        mostrarModalEditar = true;
    }

    private void EditarVariablePorIndicadorSeleccionada()
    {
        var variableSeleccionada = variablesPorIndicadorSeleccionadas.FirstOrDefault(v => v.Value).Key;
        if (variableSeleccionada != null)
        {
            EditarVariablePorIndicador(variableSeleccionada);
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private async Task ActualizarVariablePorIndicador()
    {
        try
        {
            var variableActualizada = new Dictionary<string, object>
            {
                { "fkidvariable", idVariableEditar },
                { "fkidindicador", idIndicadorEditar },
                { "dato", datoEditar },
                { "fkemailusuario", emailUsuarioEditar },
                { "fechadato", fechaDatoEditar }
            };

            var resultado = await servicioEntidad.ActualizarAsync(
                "proyecto", 
                "variablesporindicador", 
                "id", 
                idVariableOriginal.ToString(), 
                variableActualizada);
            
            if (resultado)
            {
                await CargarVariablesPorIndicador();
                CerrarModalEditar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar variable por indicador: {ex.Message}");
        }
    }

    private void EliminarVariablePorIndicador(Dictionary<string, object> variable)
    {
        variableAEliminar = variable;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        variableAEliminar = null;
    }

    private async Task ConfirmarEliminarVariablePorIndicador()
    {
        if (variableAEliminar != null)
        {
            var idVariable = ObtenerValor(variableAEliminar, "id");

            try
            {
                var resultado = await servicioEntidad.EliminarAsync(
                    "proyecto", 
                    "variablesporindicador", 
                    "id", 
                    idVariable);

                if (resultado)
                {
                    await CargarVariablesPorIndicador();
                    CerrarModalEliminar();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar variable por indicador: {ex.Message}");
            }
        }
    }

    private void MostrarModalEliminarMultiples()
    {
        if (variablesPorIndicadorSeleccionadas.Any(v => v.Value))
        {
            mostrarModalEliminarMultiples = true;
        }
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var variablesParaEliminar = variablesPorIndicadorSeleccionadas
            .Where(v => v.Value)
            .Select(v => v.Key)
            .ToList();

        bool todosEliminados = true;

        foreach (var variable in variablesParaEliminar)
        {
            var idVariable = ObtenerValor(variable, "id");

            var resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "variablesporindicador", 
                "id", 
                idVariable);

            if (!resultado)
            {
                todosEliminados = false;
            }
        }

        if (todosEliminados)
        {
            await CargarVariablesPorIndicador();
            CerrarModalEliminarMultiples();
        }
    }
}