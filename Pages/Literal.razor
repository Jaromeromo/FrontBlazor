@page "/Literal"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
   <div class="table-responsive">
       <div class="table-wrapper">
           <div class="table-title">
               <div class="row">
                   <div class="col-sm-6">
                       <h2>Administrar <b>Literales</b></h2>
                   </div>
                   <div class="col-sm-6">
                       <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                           <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                       </button>

                       <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                           <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                       </button>
                   </div>
               </div>
           </div>

           @if (cargando)
           {
               <p><em>Cargando...</em></p>
           }
           else if (literales == null || literales.Count == 0)
           {
               <p>No hay Literales disponibles.</p>
           }
           else
           {
               <table class="table table-striped table-hover">
                   <thead>
                       <tr>
                           <th>ID</th>
                           <th>Descripción</th>
                           <th>ID Artículo</th>
                       </tr>
                   </thead>
                   <tbody>
                       @foreach (var literal in literales)
                       {
                           <tr>
                               <td>@ObtenerValor(literal, "id")</td>
                               <td>@ObtenerValor(literal, "descripcion")</td>
                               <td>@ObtenerValor(literal, "fkidarticulo")</td>
                           </tr>
                       }
                   </tbody>
               </table>
           }
       </div>
   </div>
</div>

@if (mostrarModalGuardar)
{
  <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
   <div class="modal-dialog">
       <div class="modal-content">
           <form @onsubmit="GuardarLiteral">
               <div class="modal-header">
                   <h4 class="modal-title">Agregar Literal</h4>
                   <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
               </div>
               <div class="modal-body">
                   <div class="form-group">
                       <label>ID</label>
                       <input type="text" class="form-control" @bind="idLiteral" required maxlength="20">
                   </div>
                   <div class="form-group">
                       <label>Descripción</label>
                       <textarea class="form-control" rows="3" @bind="descripcionLiteral" required maxlength="1000"></textarea>
                   </div>
                   <div class="form-group">
                       <label>Artículo</label>
                       <select class="form-control" @bind="idArticulo" required>
                           <option value="">-- Seleccione un artículo --</option>
                           @foreach (var articulo in articulos)
                           {
                               <option value="@ObtenerValor(articulo, "id")">@ObtenerValor(articulo, "nombre")</option>
                           }
                       </select>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                   <button type="submit" class="btn btn-success">Guardar</button>
               </div>
           </form>
       </div>
   </div>
</div>
}

@if (mostrarModalConsulta)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
       <div class="modal-dialog">
           <div class="modal-content">
               <div class="modal-header">
                   <h4 class="modal-title">Consultar Literal</h4>
                   <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
               </div>
               <div class="modal-body">
                   <div class="form-group">
                       <label>ID</label>
                       <input type="text" class="form-control" @bind="idConsultar" maxlength="20">
                   </div>
                   <div class="form-group">
                       <label>Artículo</label>
                       <select class="form-control" @bind="idArticuloConsultar">
                           <option value="">-- Todos los artículos --</option>
                           @foreach (var articulo in articulos)
                           {
                               <option value="@ObtenerValor(articulo, "id")">@ObtenerValor(articulo, "nombre")</option>
                           }
                       </select>
                   </div>
                   <button class="btn btn-primary mt-2" @onclick="ConsultarLiteral">Buscar</button>

                   @if (literalConsultado != null)
                   {
                       <hr>
                       <div class="form-group">
                           <label>ID</label>
                           <input type="text" class="form-control" value="@ObtenerValor(literalConsultado, "id")" disabled>
                       </div>
                       <div class="form-group">
                           <label>Descripción</label>
                           <textarea class="form-control" rows="3" value="@ObtenerValor(literalConsultado, "descripcion")" disabled></textarea>
                       </div>
                       <div class="form-group">
                           <label>Artículo</label>
                           <input type="text" class="form-control" value="@ObtenerNombreArticulo(literalConsultado)" disabled>
                       </div>
                   }
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
               </div>
           </div>
       </div>
   </div>
}

@code {
   private List<Dictionary<string, object>> literales = new();
   private List<Dictionary<string, object>> articulos = new();
   private bool cargando = true;
   private bool mostrarModalGuardar = false;
   private bool mostrarModalConsulta = false;

   // Variables para los formularios
   private string idLiteral;
   private string descripcionLiteral;
   private string idArticulo;
   
   // Variables para consulta
   private string idConsultar;
   private string idArticuloConsultar;

   private Dictionary<string, object> literalConsultado;

   protected override async Task OnInitializedAsync()
   {
       await CargarLiterales();
       await CargarArticulos();
   }

   private async Task CargarLiterales()
   {
       cargando = true;
       try
       {
           literales = await servicioEntidad.ObtenerTodosAsync("proyecto", "literal") ?? new();
       }
       catch (Exception ex)
       {
           Console.WriteLine($"Error al cargar literales: {ex.Message}");
           literales = new();
       }
       finally
       {
           cargando = false;
       }
   }

   private async Task CargarArticulos()
   {
       try
       {
           articulos = await servicioEntidad.ObtenerTodosAsync("proyecto", "articulo") ?? new();
       }
       catch (Exception ex)
       {
           Console.WriteLine($"Error al cargar artículos: {ex.Message}");
           articulos = new();
       }
   }

   private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
   {
       return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
   }

   private string ObtenerNombreArticulo(Dictionary<string, object> literal)
   {
       var idArticulo = ObtenerValor(literal, "fkidarticulo");
       var articulo = articulos.FirstOrDefault(a => 
           ObtenerValor(a, "id") == idArticulo);

       if (articulo != null)
       {
           return $"{ObtenerValor(articulo, "id")} - {ObtenerValor(articulo, "nombre")}";
       }
       return idArticulo;
   }

   private void AbrirModalGuardar()
   {
       mostrarModalGuardar = true;
       idLiteral = "";
       descripcionLiteral = "";
       idArticulo = "";
   }

   private void CerrarModalGuardar()
   {
       mostrarModalGuardar = false;
   }

   private async Task GuardarLiteral()
   {
       try
       {
           // Crear un nuevo literal con los campos según la estructura de la tabla
           var nuevoLiteral = new Dictionary<string, object>
           {
               { "id", idLiteral },
               { "descripcion", descripcionLiteral },
               { "fkidarticulo", idArticulo }
           };

           var resultado = await servicioEntidad.CrearAsync("proyecto", "literal", nuevoLiteral);

           if (resultado)
           {
               await CargarLiterales();
               CerrarModalGuardar();
           }
       }
       catch (Exception ex)
       {
           Console.WriteLine($"Error al guardar literal: {ex.Message}");
       }
   }

   private async Task ConsultarLiteral()
   {
       try
       {
           if (!string.IsNullOrEmpty(idConsultar))
           {
               // Buscar por ID
               var literal = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "literal", "id", idConsultar);
               literalConsultado = literal;
           }
           else if (!string.IsNullOrEmpty(idArticuloConsultar))
           {
               // Buscar por artículo
               var literal = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "literal", "fkidarticulo", idArticuloConsultar);
               literalConsultado = literal;
           }
       }
       catch (Exception ex)
       {
           Console.WriteLine($"Error al consultar literal: {ex.Message}");
           literalConsultado = null;
       }
   }

   private void CerrarModalConsulta()
   {
       mostrarModalConsulta = false;
       idConsultar = "";
       idArticuloConsultar = "";
       literalConsultado = null;
   }
}