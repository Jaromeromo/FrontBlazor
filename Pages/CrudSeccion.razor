@page "/secciones"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Secciones</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (secciones == null || secciones.Count == 0)
            {
                <p>No hay secciones disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th/>
                            <th>Nombre</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var seccion in secciones)
                        {
                            <tr>

                                <td>@ObtenerValor(seccion, "id")</td>
                                <td/>
                                <td>@ObtenerValor(seccion, "nombre")</td>

                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Seccion</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID de la Fuente</label>
                        <input type="text" class="form-control" @bind="idSeccionConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarSeccion">Buscar</button>

                    @if (seccionConsultada != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreSeccionConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> secciones = new();

    private bool cargando = true;
    private string? errorMensaje = null;
    private bool mostrarModalConsulta = false;
    private string idSeccionConsulta = "";
    private Dictionary<string, object>? seccionConsultada = null;
    private string nombreSeccionConsulta = "";
  
    protected override async Task OnInitializedAsync()
    {
        await CargarSecciones();
    }

    private async Task CargarSecciones()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "seccion");
            secciones = resultado ?? new();

        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar secciones: {ex.Message}";
            secciones = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private async Task ConsultarSeccion()
    {
        if (string.IsNullOrEmpty(idSeccionConsulta))
        {
            errorMensaje = "Debe ingresar un ID de sección.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "seccion", "id", idSeccionConsulta);

        if (resultado != null)
        {
            seccionConsultada = resultado;
            nombreSeccionConsulta = ObtenerValor(resultado, "nombre");
        }
        else
        {
            errorMensaje = "No se encontró la sección.";
            seccionConsultada = null;
            nombreSeccionConsulta = "";
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idSeccionConsulta = "";
        seccionConsultada = null;
        nombreSeccionConsulta = "";
        StateHasChanged();
    }
}
