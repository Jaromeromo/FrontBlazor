@page "/ResponsablesPorIndicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Responsables por Indicador</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="EditarResponsableSeleccionado">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (responsables == null || responsables.Count == 0)
            {
                <p>No hay Responsables por Indicador disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>ID Responsable</th>
                            <th>ID Indicador</th>
                            <th>Fecha Asignación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var responsable in responsables)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@responsablesSeleccionados[responsable]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(responsable, "fkidresponsable")</td>
                                <td>@ObtenerValor(responsable, "fkidindicador")</td>
                                <td>@ObtenerFechaFormateada(responsable, "fechaasignacion")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarResponsable(responsable)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarResponsable(responsable)"
                                        @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalGuardar)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <form @onsubmit="GuardarResponsable">
                <div class="modal-header">
                    <h4 class="modal-title">Agregar Responsable por Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID Responsable</label>
                        <select class="form-control" @bind="idResponsable" required>
                            <option value="">-- Seleccione un ID Responsable --</option>
                            @foreach (var resp in responsablesDisponibles)
                            {
                                <option value="@resp">@resp</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>ID Indicador</label>
                        <select class="form-control" @bind="idIndicador" required>
                            <option value="">-- Seleccione un ID Indicador --</option>
                            @foreach (var ind in indicadoresDisponibles)
                            {
                                <option value="@ind">@ind</option>
                            }
                        </select>
                    </div>
                    @* La fecha se genera automáticamente con DEFAULT GETDATE() en la base de datos *@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Responsable por Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID Responsable</label>
                        <select class="form-control" @bind="idResponsableConsultar">
                            <option value="">-- Seleccione un ID Responsable --</option>
                            @foreach (var resp in responsablesDisponibles)
                            {
                                <option value="@resp">@resp</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>ID Indicador</label>
                        <select class="form-control" @bind="idIndicadorConsultar">
                            <option value="">-- Seleccione un ID Indicador --</option>
                            @foreach (var ind in indicadoresDisponibles)
                            {
                                <option value="@ind">@ind</option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarResponsable">Buscar</button>

                    @if (responsableConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>ID Responsable</label>
                            <input type="text" class="form-control" value="@idResponsableConsultar" disabled>
                        </div>
                        <div class="form-group">
                            <label>ID Indicador</label>
                            <input type="text" class="form-control" value="@idIndicadorConsultar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Fecha Asignación</label>
                            <input type="text" class="form-control" value="@ObtenerFechaFormateada(responsableConsultado, "fechaasignacion")" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarResponsable">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Responsable por Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>ID Responsable</label>
                            <select class="form-control" @bind="idResponsableEditar" required>
                                <option value="">-- Seleccione un ID Responsable --</option>
                                @foreach (var resp in responsablesDisponibles)
                                {
                                    <option value="@resp">@resp</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>ID Indicador</label>
                            <select class="form-control" @bind="idIndicadorEditar" required>
                                <option value="">-- Seleccione un ID Indicador --</option>
                                @foreach (var ind in indicadoresDisponibles)
                                {
                                    <option value="@ind">@ind</option>
                                }
                            </select>
                        </div>
                        @* No se permite editar la fecha de asignación ya que se genera automáticamente *@
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarResponsable">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Responsable por Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este registro?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Responsables Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los registros seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                            @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> responsables = new();
    private Dictionary<Dictionary<string, object>, bool> responsablesSeleccionados = new();
    private bool cargando = true;
    private bool mostrarModalGuardar = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;
    
    // Listas para los selectores
    private List<string> responsablesDisponibles = new();
    private List<int> indicadoresDisponibles = new();
    
    // Listas que faltaban en el código original
    private List<Dictionary<string, object>> listaResponsables = new();
    private List<Dictionary<string, object>> listaIndicadores = new();
    
    private Dictionary<string, object> responsableAEliminar;
    private Dictionary<string, object> responsableConsultado;

    private string idResponsable;
    private int idIndicador;
    private string idResponsableConsultar;
    private int idIndicadorConsultar;
    private string idResponsableEditar;
    private int idIndicadorEditar;
    private string idResponsableOriginal;
    private int idIndicadorOriginal;
    private DateTime fechaAsignacion = DateTime.Now;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var responsable in responsables)
            {
                responsablesSeleccionados[responsable] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarResponsables();
        await CargarIndicadores();
    }

    private async Task CargarDatosIniciales()
    {
        cargando = true;

        try
        {
            // Cargar responsables por indicador
            responsables = await servicioEntidad.ObtenerTodosAsync("proyecto", "responsablesporindicador") ?? new();
            responsablesSeleccionados = responsables.ToDictionary(r => r, r => false);
            
            // Extraer IDs únicos para los selectores
            await ExtraerIdsDisponibles();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos iniciales: {ex.Message}");
            responsables = new();
        }
        finally
        {
            cargando = false;
        }
    }
    
    // Métodos que faltaban en el código original
    private async Task CargarResponsables()
    {
        try
        {
            listaResponsables = await servicioEntidad.ObtenerTodosAsync("proyecto", "responsables") ?? new();
            
            // Si no hay datos en la tabla responsables, podríamos cargar los IDs disponibles
            if (listaResponsables.Count == 0 && responsablesDisponibles.Count > 0)
            {
                listaResponsables = responsablesDisponibles.Select(id => new Dictionary<string, object> { 
                    { "idresponsable", id } 
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar responsables: {ex.Message}");
            listaResponsables = new();
        }
    }
    
    private async Task CargarIndicadores()
    {
        try
        {
            listaIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto", "indicadores") ?? new();
            
            // Si no hay datos en la tabla indicadores, podríamos cargar los IDs disponibles
            if (listaIndicadores.Count == 0 && indicadoresDisponibles.Count > 0)
            {
                listaIndicadores = indicadoresDisponibles.Select(id => new Dictionary<string, object> { 
                    { "idindicador", id } 
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar indicadores: {ex.Message}");
            listaIndicadores = new();
        }
    }
    
    private async Task ExtraerIdsDisponibles()
    {
        // Extraer IDs únicos de responsables
        responsablesDisponibles = responsables
            .Select(r => ObtenerValor(r, "fkidresponsable"))
            .Where(id => !string.IsNullOrEmpty(id))
            .Distinct()
            .OrderBy(id => id)
            .ToList();
            
        // Extraer IDs únicos de indicadores
        indicadoresDisponibles = responsables
            .Select(r => ObtenerValor(r, "fkidindicador"))
            .Where(id => !string.IsNullOrEmpty(id))
            .Select(id => {
                if (int.TryParse(id, out int idInt))
                    return idInt;
                return 0;
            })
            .Where(id => id > 0)
            .Distinct()
            .OrderBy(id => id)
            .ToList();
            
        // Si no hay datos, agregar algunos valores de ejemplo para que los selectores no estén vacíos
        if (responsablesDisponibles.Count == 0)
        {
            responsablesDisponibles.Add("RESP001");
            responsablesDisponibles.Add("RESP002");
        }
        
        if (indicadoresDisponibles.Count == 0)
        {
            indicadoresDisponibles.Add(1);
            indicadoresDisponibles.Add(2);
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    
    private string ObtenerFechaFormateada(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario.TryGetValue(clave, out var valor) && valor != null)
        {
            if (DateTime.TryParse(valor.ToString(), out DateTime fecha))
            {
                return fecha.ToString("dd/MM/yyyy HH:mm:ss");
            }
        }
        return "";
    }

    private async void AbrirModalGuardar()
    {
        if (responsablesDisponibles.Count == 0 || indicadoresDisponibles.Count == 0)
        {
            await ExtraerIdsDisponibles();
        }
            
        mostrarModalGuardar = true;
        idResponsable = "";
        idIndicador = 0;
        fechaAsignacion = DateTime.Now;
        StateHasChanged();
    }

    private void CerrarModalGuardar()
    {
        mostrarModalGuardar = false;
    }

    private async Task GuardarResponsable()
    {
        try
        {
            var nuevoResponsable = new Dictionary<string, object>
            {
                { "fkidresponsable", idResponsable },
                { "fkidindicador", idIndicador },
                { "fechaasignacion", fechaAsignacion }
            };

            var resultado = await servicioEntidad.CrearAsync("proyecto", "responsablesporindicador", nuevoResponsable);

            if (resultado)
            {
                await CargarDatosIniciales();
                CerrarModalGuardar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar responsable: {ex.Message}");
        }
    }

    private async Task ConsultarResponsable()
    {
        try
        {
            // Para consultar un responsable específico, necesitamos ambas claves primarias
            var url = $"fkidresponsable/{idResponsableConsultar}/fkidindicador/{idIndicadorConsultar}";
            var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "responsablesporindicador", "fkidresponsable", idResponsableConsultar);
            
            if (resultado != null && ObtenerValor(resultado, "fkidindicador") == idIndicadorConsultar.ToString())
            {
                responsableConsultado = resultado;
            }
            else
            {
                responsableConsultado = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar responsable: {ex.Message}");
            responsableConsultado = null;
        }
    }

    private async void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idResponsableConsultar = "";
        idIndicadorConsultar = 0;
        responsableConsultado = null;
        StateHasChanged();
    }

    private async void EditarResponsable(Dictionary<string, object> responsable)
    {
        // Asegurar que los catálogos estén cargados
        if (listaResponsables.Count == 0)
            await CargarResponsables();
            
        if (listaIndicadores.Count == 0)
            await CargarIndicadores();
            
        idResponsableOriginal = ObtenerValor(responsable, "fkidresponsable");
        idIndicadorOriginal = int.Parse(ObtenerValor(responsable, "fkidindicador"));
        
        idResponsableEditar = idResponsableOriginal;
        idIndicadorEditar = idIndicadorOriginal;
        
        // Intentar parsear la fecha si existe
        if (DateTime.TryParse(ObtenerValor(responsable, "fechaasignacion"), out DateTime fecha))
        {
            fechaAsignacion = fecha;
        }
        else
        {
            fechaAsignacion = DateTime.Now;
        }
        
        mostrarModalEditar = true;
        StateHasChanged();
    }

    private void EditarResponsableSeleccionado()
    {
        var responsableSeleccionado = responsablesSeleccionados.FirstOrDefault(r => r.Value).Key;
        if (responsableSeleccionado != null)
        {
            EditarResponsable(responsableSeleccionado);
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private async Task ActualizarResponsable()
    {
        try
        {
            // Para actualizar un responsable, primero debemos eliminar el existente y luego crear uno nuevo
            var eliminado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "responsablesporindicador", 
                "fkidresponsable", 
                idResponsableOriginal);

            if (eliminado)
            {
                var nuevoResponsable = new Dictionary<string, object>
                {
                    { "fkidresponsable", idResponsableEditar },
                    { "fkidindicador", idIndicadorEditar },
                    { "fechaasignacion", fechaAsignacion }
                };

                var creado = await servicioEntidad.CrearAsync("proyecto", "responsablesporindicador", nuevoResponsable);
                
                if (creado)
                {
                    await CargarDatosIniciales();
                    CerrarModalEditar();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar responsable: {ex.Message}");
        }
    }

    private void EliminarResponsable(Dictionary<string, object> responsable)
    {
        responsableAEliminar = responsable;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        responsableAEliminar = null;
    }

    private async Task ConfirmarEliminarResponsable()
    {
        if (responsableAEliminar != null)
        {
            var idResponsable = ObtenerValor(responsableAEliminar, "fkidresponsable");
            var idIndicador = ObtenerValor(responsableAEliminar, "fkidindicador");

            try
            {
                var resultado = await servicioEntidad.EliminarAsync(
                    "proyecto", 
                    "responsablesporindicador", 
                    "fkidresponsable", 
                    idResponsable);

                if (resultado)
                {
                    await CargarDatosIniciales();
                    CerrarModalEliminar();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar responsable: {ex.Message}");
            }
        }
    }

    private void MostrarModalEliminarMultiples()
    {
        if (responsablesSeleccionados.Any(r => r.Value))
        {
            mostrarModalEliminarMultiples = true;
        }
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var responsablesParaEliminar = responsablesSeleccionados
            .Where(r => r.Value)
            .Select(r => r.Key)
            .ToList();

        bool todosEliminados = true;

        foreach (var responsable in responsablesParaEliminar)
        {
            var idResponsable = ObtenerValor(responsable, "fkidresponsable");

            var resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "responsablesporindicador", 
                "fkidresponsable", 
                idResponsable);

            if (!resultado)
            {
                todosEliminados = false;
            }
        }

        if (todosEliminados)
        {
            await CargarDatosIniciales();
            CerrarModalEliminarMultiples();
        }
    }
}