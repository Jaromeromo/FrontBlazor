@page "/RepresenVisualPorIndicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Representaciones Visuales por Indicador</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarRelacionSeleccionada()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (relaciones == null || relaciones.Count == 0)
            {
                <p>No hay relaciones Representación Visual-Indicador disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>ID Indicador</th>
                            <th>ID Representación Visual</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var relacion in relaciones)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@relacionesSeleccionadas[relacion]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(relacion, "fkidindicador")</td>
                                <td>@ObtenerValor(relacion, "fkidrepresenvisual")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarRelacion(relacion)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarRelacion(relacion)"
                                        @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalGuardar)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <form @onsubmit="GuardarRelacion">
                <div class="modal-header">
                    <h4 class="modal-title">Agregar Relación Representación Visual-Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Indicador</label>
                        <select class="form-control" @bind="idIndicador" required>
                            <option value="0">-- Seleccione un indicador --</option>
                            @foreach (var indicador in indicador)
                            {
                                <option value="@ObtenerValor(indicador, "idindicador")">
                                    @ObtenerValor(indicador, "idindicador") - @ObtenerValor(indicador, "nombre")
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Representación Visual</label>
                        <select class="form-control" @bind="idRepresenVisual" required>
                            <option value="0">-- Seleccione una representación visual --</option>
                            @foreach (var visual in representacionesVisuales)
                            {
                                <option value="@ObtenerValor(visual, "idrepresenvisual")">
                                    @ObtenerValor(visual, "idrepresenvisual") - @ObtenerValor(visual, "nombre")
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Relación</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Indicador</label>
                        <select class="form-control" @bind="idIndicadorConsultar">
                            <option value="0">-- Seleccione un indicador --</option>
                            @foreach (var indicador in indicador)
                            {
                                <option value="@ObtenerValor(indicador, "idindicador")">
                                    @ObtenerValor(indicador, "idindicador") - @ObtenerValor(indicador, "nombre")
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Representación Visual</label>
                        <select class="form-control" @bind="idRepresenVisualConsultar">
                            <option value="0">-- Seleccione una representación visual --</option>
                            @foreach (var visual in representacionesVisuales)
                            {
                                <option value="@ObtenerValor(visual, "idrepresenvisual")">
                                    @ObtenerValor(visual, "idrepresenvisual") - @ObtenerValor(visual, "nombre")
                                </option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarRelacion">Buscar</button>

                    @if (relacionConsultada != null)
                    {
                        <hr>
                        <div class="alert alert-info">
                            <p><strong>Relación encontrada:</strong></p>
                            <p>Indicador: @ObtenerNombreIndicador(int.Parse(ObtenerValor(relacionConsultada, "fkidindicador")))</p>
                            <p>Representación Visual: @ObtenerNombreRepresentacionVisual(int.Parse(ObtenerValor(relacionConsultada, "fkidrepresenvisual")))</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarRelacion">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Relación</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Indicador Original</label>
                            <input type="text" class="form-control" value="@ObtenerNombreIndicador(idIndicadorOriginal)" disabled>
                            <input type="hidden" @bind="idIndicadorOriginal">
                        </div>
                        <div class="form-group">
                            <label>Representación Visual Original</label>
                            <input type="text" class="form-control" value="@ObtenerNombreRepresentacionVisual(idRepresenVisualOriginal)" disabled>
                            <input type="hidden" @bind="idRepresenVisualOriginal">
                        </div>
                        <div class="form-group">
                            <label>Nuevo Indicador</label>
                            <select class="form-control" @bind="idIndicadorEditar" required>
                                <option value="0">-- Seleccione un indicador --</option>
                                @foreach (var indicador in indicador)
                                {
                                    <option value="@ObtenerValor(indicador, "idindicador")">
                                        @ObtenerValor(indicador, "idindicador") - @ObtenerValor(indicador, "nombre")
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Nueva Representación Visual</label>
                            <select class="form-control" @bind="idRepresenVisualEditar" required>
                                <option value="0">-- Seleccione una representación visual --</option>
                                @foreach (var visual in representacionesVisuales)
                                {
                                    <option value="@ObtenerValor(visual, "idrepresenvisual")">
                                        @ObtenerValor(visual, "idrepresenvisual") - @ObtenerValor(visual, "nombre")
                                    </option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarRelacion">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Relación</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        @if (relacionAEliminar != null)
                        {
                            <p>¿Está seguro de que desea eliminar esta relación?</p>
                            <div class="alert alert-warning">
                                <p>Indicador: @ObtenerNombreIndicador(int.Parse(ObtenerValor(relacionAEliminar, "fkidindicador")))</p>
                                <p>Representación Visual: @ObtenerNombreRepresentacionVisual(int.Parse(ObtenerValor(relacionAEliminar, "fkidrepresenvisual")))</p>
                            </div>
                            <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Relaciones Seleccionadas</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las @relacionesSeleccionadas.Count(r => r.Value) relaciones seleccionadas?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                            @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> relaciones = new();
    private List<Dictionary<string, object>> indicador = new();
    private List<Dictionary<string, object>> representacionesVisuales = new();
    private Dictionary<Dictionary<string, object>, bool> relacionesSeleccionadas = new();
    private bool cargando = true;
    private bool mostrarModalGuardar = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;
    
    private Dictionary<string, object> relacionAEliminar;
    private Dictionary<string, object> relacionConsultada;

    private int idIndicador;
    private int idRepresenVisual;
    private int idIndicadorConsultar;
    private int idRepresenVisualConsultar;
    private int idIndicadorEditar;
    private int idRepresenVisualEditar;
    private int idIndicadorOriginal;
    private int idRepresenVisualOriginal;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var relacion in relaciones)
            {
                relacionesSeleccionadas[relacion] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;

        try
        {
            // Cargar las relaciones
            var tareasRelaciones = servicioEntidad.ObtenerTodosAsync("proyecto", "represenvisualporindicador");
            
            // Cargar los indicadores
            var tareasIndicadores = servicioEntidad.ObtenerTodosAsync("proyecto", "indicador");
            
            // Cargar las representaciones visuales
            var tareasVisuales = servicioEntidad.ObtenerTodosAsync("proyecto", "represenvisual");

            // Esperar a que todas las tareas terminen
            await Task.WhenAll(tareasRelaciones, tareasIndicadores, tareasVisuales);

            // Asignar los resultados
            relaciones = await tareasRelaciones ?? new();
            indicador = await tareasIndicadores ?? new();
            representacionesVisuales = await tareasVisuales ?? new();

            relacionesSeleccionadas = relaciones.ToDictionary(r => r, r => false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
            relaciones = new();
            indicador = new();
            representacionesVisuales = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private string ObtenerNombreIndicador(int idIndicador)
    {
    var indicadorEncontrado = indicador.FirstOrDefault(i => int.Parse(ObtenerValor(i, "idindicador")) == idIndicador);
    if (indicadorEncontrado != null)
    {
        return $"{idIndicador} - {ObtenerValor(indicadorEncontrado, "nombre")}";
    }
    return $"{idIndicador}";
    }


    private string ObtenerNombreRepresentacionVisual(int idRepresenVisual)
    {
        var visual = representacionesVisuales.FirstOrDefault(v => int.Parse(ObtenerValor(v, "idrepresenvisual")) == idRepresenVisual);
        if (visual != null)
        {
            return $"{idRepresenVisual} - {ObtenerValor(visual, "nombre")}";
        }
        return $"{idRepresenVisual}";
    }

    private void AbrirModalGuardar()
    {
        mostrarModalGuardar = true;
        idIndicador = 0;
        idRepresenVisual = 0;
    }

    private void CerrarModalGuardar()
    {
        mostrarModalGuardar = false;
    }

    private async Task GuardarRelacion()
    {
        try
        {
            var nuevaRelacion = new Dictionary<string, object>
            {
                { "fkidindicador", idIndicador },
                { "fkidrepresenvisual", idRepresenVisual }
            };

            var resultado = await servicioEntidad.CrearAsync("proyecto", "represenvisualporindicador", nuevaRelacion);

            if (resultado)
            {
                await CargarDatos();
                CerrarModalGuardar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar relación: {ex.Message}");
        }
    }

    private async Task ConsultarRelacion()
    {
        try
        {
            // Para consultar una relación específica, necesitamos ambas claves primarias
            var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "represenvisualporindicador", "fkidindicador", idIndicadorConsultar.ToString());
            
            if (resultado != null && ObtenerValor(resultado, "fkidrepresenvisual") == idRepresenVisualConsultar.ToString())
            {
                relacionConsultada = resultado;
            }
            else
            {
                relacionConsultada = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar relación: {ex.Message}");
            relacionConsultada = null;
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idIndicadorConsultar = 0;
        idRepresenVisualConsultar = 0;
        relacionConsultada = null;
    }

    private void EditarRelacion(Dictionary<string, object> relacion)
    {
        idIndicadorOriginal = int.Parse(ObtenerValor(relacion, "fkidindicador"));
        idRepresenVisualOriginal = int.Parse(ObtenerValor(relacion, "fkidrepresenvisual"));
        
        idIndicadorEditar = idIndicadorOriginal;
        idRepresenVisualEditar = idRepresenVisualOriginal;
        
        mostrarModalEditar = true;
    }

    private void EditarRelacionSeleccionada()
    {
        var relacionSeleccionada = relacionesSeleccionadas.FirstOrDefault(r => r.Value).Key;
        if (relacionSeleccionada != null)
        {
            EditarRelacion(relacionSeleccionada);
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private async Task ActualizarRelacion()
    {
        try
        {
            // Para actualizar una relación, primero debemos eliminar la existente y luego crear una nueva
            var eliminado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "represenvisualporindicador", 
                "fkidindicador", 
                idIndicadorOriginal.ToString());

            if (eliminado)
            {
                var nuevaRelacion = new Dictionary<string, object>
                {
                    { "fkidindicador", idIndicadorEditar },
                    { "fkidrepresenvisual", idRepresenVisualEditar }
                };

                var creado = await servicioEntidad.CrearAsync("proyecto", "represenvisualporindicador", nuevaRelacion);
                
                if (creado)
                {
                    await CargarDatos();
                    CerrarModalEditar();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar relación: {ex.Message}");
        }
    }

    private void EliminarRelacion(Dictionary<string, object> relacion)
    {
        relacionAEliminar = relacion;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        relacionAEliminar = null;
    }

    private async Task ConfirmarEliminarRelacion()
    {
        if (relacionAEliminar != null)
        {
            var idIndicador = ObtenerValor(relacionAEliminar, "fkidindicador");
            var idRepresenVisual = ObtenerValor(relacionAEliminar, "fkidrepresenvisual");

            try
            {
                var resultado = await servicioEntidad.EliminarAsync(
                    "proyecto", 
                    "represenvisualporindicador", 
                    "fkidindicador", 
                    idIndicador);

                if (resultado)
                {
                    await CargarDatos();
                    CerrarModalEliminar();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar relación: {ex.Message}");
            }
        }
    }

    private void MostrarModalEliminarMultiples()
    {
        if (relacionesSeleccionadas.Any(r => r.Value))
        {
            mostrarModalEliminarMultiples = true;
        }
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var relacionesParaEliminar = relacionesSeleccionadas
            .Where(r => r.Value)
            .Select(r => r.Key)
            .ToList();

        bool todosEliminados = true;

        foreach (var relacion in relacionesParaEliminar)
        {
            var idIndicador = ObtenerValor(relacion, "fkidindicador");

            var resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "represenvisualporindicador", 
                "fkidindicador", 
                idIndicador);

            if (!resultado)
            {
                todosEliminados = false;
            }
        }

        if (todosEliminados)
        {
            await CargarDatos();
            CerrarModalEliminarMultiples();
        }
    }
}