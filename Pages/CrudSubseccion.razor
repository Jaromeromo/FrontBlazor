@page "/subsecciones"
@inherits FrontBlazor.Services.ValidacionAcceso
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Subsecciones</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (subsecciones == null || subsecciones.Count == 0)
            {
                <p>No hay subsecciones disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                           
                            <th>ID</th>
                            <th>Nombre</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subseccion in subsecciones)
                        {
                            <tr>
                                <td>@ObtenerValor(subseccion, "id")</td>
                                <td>@ObtenerValor(subseccion, "nombre")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>


@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Subsección</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID de la Subsección</label>
                        <input type="text" class="form-control" @bind="idSubseccionConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarSubseccion">Buscar</button>

                    @if (subseccionConsultada != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreSubseccionConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
private List<Dictionary<string, object>> subsecciones = new();
private bool cargando = true;
private string? errorMensaje = null;



private bool mostrarModalConsulta = false;
private string idSubseccionConsulta = "";
private Dictionary<string, object>? subseccionConsultada = null;
private string nombreSubseccionConsulta = "";


protected override async Task OnInitializedAsync()
{
    await CargarSubsecciones();
}

private async Task CargarSubsecciones()
{
    cargando = true;
    errorMensaje = null;

    try
    {
        var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "subseccion");
        subsecciones = resultado ?? new();
        
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error al cargar subsecciones: {ex.Message}";
        subsecciones = new();
    }
    finally
    {
        cargando = false;
    }
}

private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
{
    return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
}




private async Task ConsultarSubseccion()
{
    if (string.IsNullOrEmpty(idSubseccionConsulta))
    {
        errorMensaje = "Debe ingresar un ID de subsección.";
        return;
    }

    var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "subseccion", "id", idSubseccionConsulta);

    if (resultado != null)
    {
        subseccionConsultada = resultado;
        nombreSubseccionConsulta = ObtenerValor(resultado, "nombre");
    }
    else
    {
        errorMensaje = "No se encontró la subsección.";
        subseccionConsultada = null;
        nombreSubseccionConsulta = "";
    }
}

private void CerrarModalConsulta()
{
    mostrarModalConsulta = false;
    idSubseccionConsulta = "";
    subseccionConsultada = null;
    nombreSubseccionConsulta = "";
    StateHasChanged();
}

}
}
